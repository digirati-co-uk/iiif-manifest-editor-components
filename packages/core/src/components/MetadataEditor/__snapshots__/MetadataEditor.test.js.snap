// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MetadataEditor renders the editable canvas unchanged 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WithStyles(MetadataEditor)
    annotation={
      Object {
        "id": "test-annotation-1",
      }
    }
    canvas={
      Object {
        "id": "test-canvas-1",
      }
    }
    lang="en"
    manifest={
      Object {
        "id": "test-manifest-1",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "annotation": Object {
        "id": "test-annotation-1",
      },
      "canvas": Object {
        "id": "test-canvas-1",
      },
      "classes": Object {
        "label": "MetadataEditor-label-1",
        "metadataRow": "MetadataEditor-metadataRow-2",
      },
      "lang": "en",
      "manifest": Object {
        "id": "test-manifest-1",
      },
      "update": [Function],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "annotation": Object {
          "id": "test-annotation-1",
        },
        "canvas": Object {
          "id": "test-canvas-1",
        },
        "classes": Object {
          "label": "MetadataEditor-label-1",
          "metadataRow": "MetadataEditor-metadataRow-2",
        },
        "lang": "en",
        "manifest": Object {
          "id": "test-manifest-1",
        },
        "update": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
